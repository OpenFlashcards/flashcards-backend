// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  appleId   String?  @unique
  googleId  String?  @unique
  provider  String   @default("email")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userDecks UserDeck[]

  @@map("users")
}

model Deck {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parentDeckId Int?
  parentDeck   Deck?      @relation("DeckHierarchy", fields: [parentDeckId], references: [id], onDelete: Cascade)
  subDecks     Deck[]     @relation("DeckHierarchy")
  userDecks    UserDeck[]

  @@map("decks")
}

model UserDeck {
  id     Int    @id @default(autoincrement())
  userId Int
  deckId Int
  role   String @default("member") // "admin", "member"

  user User @relation(fields: [userId], references: [id])
  deck Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@unique([userId, deckId])
  @@map("user_decks")
}
